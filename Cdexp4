Code:
lalr.l
%option noyywrap
%{
#include<stdio.h>
#include "y.tab.h"
extern int yylval;
%}
%%
[0-9]+ { yylval=atoi(yytext); return NUMBER; }
[\t] ;
[\n] return 0;
. return yytext[0];
%%
lalr.y
%{
#include<stdio.h>
int flag=0;
%}
%token NUMBER
%left '+' '-'
%left '*' '/' '%'
%left '(' ')'
%%
ArithmeticExpression: E{ printf("\nResult=%d\n",$$);return 0; };
 E:E'+'E {$$=$1+$3;}
|E'-'E {$$=$1-$3;}
|E'*'E {$$=$1*$3;}
|E'/'E {$$=$1/$3;}
|E'%'E {$$=$1%$3;}
|'('E')' {$$=$2;}
| NUMBER {$$=$1;}
;
%%
void main()
{
printf("\nEnter any arithmetic expression:\n");
yyparse();
if(flag==0)
printf("\nEntered arithmetic expression is valid\n\n");
}
void yyerror()
{
printf("\nEntered arithmetic expression is invalid\n\n");
flag=1;
}
Output:
$lex lalr.l
$yacc â€“d lalr.y
$gcc lex.yy.c y.tab.c
$a.exe
Enter any arithmetic expression
10+20
result=30
Entered arithmetic expression is valid
